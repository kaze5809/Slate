/*
* http://net.tutsplus.com/tutorials/html-css-techniques/the-30-css-selectors-you-must-memorize/
*/

/* #This is referred to as an adjacent selector. 
It will select only the element that is immediately 
preceded by the former element. In this case, only 
the first paragraph after each ul will have red text.
================================================== */

ul + p {  
   color: red;  
}  


/* #The difference between the standard X Y and X > Y 
is that the latter will only select direct children.
For example, consider the following markup.
http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/childcombinator.html
================================================== */

div#container > ul {  
  border: 1px solid black;  
} 

/* #This sibling combinator is similar to X + Y,
 however, it’s less strict. While an adjacent selector 
 (ul + p) will only select the first element that is 
 immediately preceded by the former selector, this
  one is more generalized. It will select, referring 
  to our example above, any p elements, as long as they 
  follow a ul. http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/generalcombinator.html
================================================== */

ul ~ p {  
   color: red;  
}  


/* #Referred to as an attributes selector, in our 
example above, this will only select the anchor tags
 that have a title attribute. Anchor tags which do 
 not will not receive this particular styling. But, 
 what if you need to be more specific? Well…
http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/attributes.html
================================================== */

a[title] {  
   color: green;  
} 

/* #The snippet above will style all anchor tags which
link to http://net.tutsplus.com; they’ll receive our
 branded green color. All other anchor tags will 
 remain unaffected.lectors/selectors/attributes.html
 http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/attributes2.html
================================================== */

a[href="http://net.tutsplus.com"] {  
  color: #1f6053; /* nettuts green */  
} 


/* #There we go; that’s what we need. The star designates 
that the proceeding value must appear somewhere in the 
attribute’s value. That way, this covers nettuts.com, 
net.tutsplus.com, and even tutsplus.com.
http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/attributes3.html
================================================== */

a[href*="tuts"] {  
  color: #1f6053; /* nettuts green */  
}  



/* #Ever wonder how some websites are able to display a little icon next to the links which are external? I’m sure you’ve seen these before; they’re nice reminders that the link will direct you to an entirely different website.
This is a cinch with the carat symbol. It’s most commonly used in regular expressions to designate the beginning of a string. If we want to target all anchor tags that have a href which begins with http, we could use a selector similar to the snippet shown above.
http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/attributes4.html
================================================== */

a[href^="http"] {  
   background: url(path/to/external/icon.png) no-repeat;  
   padding-left: 10px;  
} 



/* #Again, we use a regular expressions symbol, $, to refer to the end of a string. In this case, we’re searching for all anchors which link to an image — or at least a url that ends with .jpg. Keep in mind that this certainly won’t work for gifs and pngs.
http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/attributes5.html
================================================== */

a[href$=".jpg"] {  
   color: red;  
} 



/* #http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/attributes6.html
================================================== */

<a href="path/to/image.jpg" data-filetype="image"> Image Link </a>

a[data-filetype="image"] {  
   color: red;  
} 



/* #
Here’s a special one that’ll impress your friends. Not too many people know about this trick. The tilda (~) symbol allows us to target an attribute which has a spaced-separated list of values.
Going along with our custom attribute from number fifteen, above, we could create a data-info attribute, which can receive a space-separated list of anything we need to make note of. In this case, we’ll make note of external links and links to images — just for the example.http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/attributes7.html
================================================== */

<a href="path/to/image.jpg" data-info="external image"> Click Me, Fool </a> 

/* Target data-info attr that contains the value "external" */  
a[data-info~="external"] {  
   color: red;  
}  
  
/* And which contain the value "image" */  
a[data-info~="image"] {  
  border: 1px solid black;  
} 



/* #
This pseudo class will only target a user interface element that has been checked - like a radio button, or checkbox. It's as simple as that.
http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/checked.html
================================================== */
input[type=radio]:checked {  
   border: 1px solid black;  
}



/* #
The before and after pseudo classes kick butt. Every day, it seems, people are finding new and creative ways to use them effectively. They simply generate content around the selected element.
Many were first introduced to these classes when they encountered the clear-fix hack.
This hack uses the :after pseudo class to append a space after the element, and then clear it. It's an excellent trick to have in your tool bag, particularly in the cases when the overflow: hidden; method isn't possible.
================================================== */

.clearfix:after {  
    content: "";  
    display: block;  
    clear: both;  
    visibility: hidden;  
    font-size: 0;  
    height: 0;  
    }  
  
.clearfix {   
   *display: inline-block;   
   _height: 1%;  
} 


/* #
Pro-tip - border-bottom: 1px solid black; looks better than text-decoration: underline;.
================================================== */

a:hover {  
 border-bottom: 1px solid black;  
}  


/* #
We can use pseudo elements (designated by ::) to style fragments of an element, such as the first line, or the first letter. Keep in mind that these must be applied to block level elements in order to take effect.
================================================== */

p::first-line {  
   font-weight: bold;  
   font-size: 1.2em;  
}    


/* #
This snippet is an abstraction that will find all paragraphs on the page, and then sub-target only the first letter of that element.
This is most often used to create newspaper-like styling for the first-letter of an article.
http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/pseudoElements.html
================================================== */

p::first-letter {  
   float: left;  
   font-size: 2em;  
   font-weight: bold;  
   font-family: cursive;  
   padding-right: 2px;  
}  


/* #
Remember the days when we had no way to target specific elements in a stack? The nth-child pseudo class solves that!
Please note that nth-child accepts an integer as a parameter, however, this is not zero-based. If you wish to target the second list item, use li:nth-child(2).
We can even use this to select a variable set of children. For example, we could do li:nth-child(4n) to select every fourth list item.
http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/nth.html
================================================== */

li:nth-child(3) {  
   color: red;  
} 


/* #
What if you had a huge list of items in a ul, and only needed to access, say, the third to the last item? Rather than doing li:nth-child(397), you could instead use the nth-last-child pseudo class.
This technique works almost identically from number sixteen above, however, the difference is that it begins at the end of the collection, and works its way back.
http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/nthLast.html
================================================== */

li:nth-last-child(2) {  
   color: red;  
} 


/* #
There will be times when, rather than selecting a child, you instead need to select according to the type of element.
Imagine mark-up that contains five unordered lists. If you wanted to style only the third ul, and didn't have a unique id to hook into, you could use the nth-of-type(n) pseudo class. In the snippet above, only the third ul will have a border around it.
http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/nthOfType.html
================================================== */

ul:nth-of-type(3) {  
   border: 1px solid black;  
} 



/* #
And yes, to remain consistent, we can also use nth-last-of-type to begin at the end of the selectors list, and work our way back to target the desired element.
================================================== */

ul:nth-last-of-type(3) {  
   border: 1px solid black;  
}  



/* #
This structural pseudo class allows us to target only the first child of the element's parent. You'll often use this to remove borders from the first and last list items.
For example, let's say you have a list of rows, and each one has a border-top and a border-bottom. Well, with that arrangement, the first and last item in that set will look a bit odd.
Many designers apply classes of first and last to compensate for this. Instead, you can use these pseudo classes.
http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/firstChild.html
================================================== */

ul li:first-child {  
   border-top: none;  
} 



